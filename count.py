# -*- coding: utf-8 -*-
"""apple_count.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PGez2kFobf-OH5M2cZYcXLBKqZhPVj7N
"""

import cv2

def count_apples(image_path):
    # Load the image using OpenCV
    image = cv2.imread(image_path)

    if image is None:
        print("Error: Unable to load the image.")
        return

    # Convert the image to grayscale
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply GaussianBlur to reduce noise
    blurred_image = cv2.GaussianBlur(gray_image, (7, 7), 0)

    # Use HoughCircles to detect circles (apples)
    circles = cv2.HoughCircles(
        blurred_image,
        cv2.HOUGH_GRADIENT,
        dp=1,
        minDist=100,
        param1=50,
        param2=30,
        minRadius=20,
        maxRadius=100
    )

    # Check if any circles were detected
    if circles is not None:
        # Round the coordinates and radius to integers
        circles = circles.round().astype("int")

        # Output the number of detected apples
        num_apples = len(circles[0])
        print(f"Number of apples: {num_apples}")

        # Draw the circles on the original image
        for circle in circles[0]:
            center_x, center_y, radius = circle
            cv2.circle(image, (center_x, center_y), radius, (0, 255, 0), 3)

        # Display the image with detected circles
        #cv2.imshow("Apples with Circles", image)
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    else:
        print("No apples detected in the image.")

if __name__ == "__main__":
    image_path = 'C:\\Users\\Akash Verma\\Dropbox\\PC\\Downloads\\count.jpeg'  # Replace with the path to your image file
    count_apples(image_path)





